# Makefile for GNU F77 compiler runtime.
#   Copyright (C) 1995-1998 Free Software Foundation, Inc.
#   Contributed by Dave Love (d.love@dl.ac.uk).
#
#This file is part of GNU Fortran.
#
#GNU Fortran is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.
#
#GNU Fortran is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with GNU Fortran; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA
#02111-1307, USA.

SHELL = /bin/sh

#### Start of system configuration section. ####

srcdir = @srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
target_alias = @target_alias@
gcc_version = @gcc_version@
gcc_version_trigger = @gcc_version_trigger@

libdir = $(exec_prefix)/lib
libsubdir = $(libdir)/gcc-lib/$(target_alias)/$(gcc_version)

# Not configured per top-level version, since that doesn't get passed
# down at configure time, but overrridden by the top-level install
# target.
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

AR = @AR@
AR_FLAGS = rc

RANLIB = @RANLIB@

CC = @CC@
CFLAGS = @CFLAGS@

# List of variables to pass to sub-makes.
# Quote this way so that it can be used to set shell variables too.
# Currently no use for PICFLAG, RUNTESTFLAGS -- check usage.
FLAGS_TO_PASS= \
	CC='$(CC)' \
	CFLAGS='$(CFLAGS)' \
	CPPFLAGS='$(CPPFLAGS)' \
	AR='$(AR)' \
	RANLIB='$(RANLIB)' \
	PICFLAG='$(PICFLAG)' \
	RUNTESTFLAGS='$(RUNTESTFLAGS)'

LIBG2C = libg2c.a

SUBDIRS = libI77 libF77 libU77

F2CEXT = abort derf derfc ef1asc ef1cmc erf erfc exit getarg getenv iargc \
	signal system flush ftell fseek access besj0 besj1 besjn besy0 besy1 \
	besyn chdir chmod ctime date dbesj0 dbesj1 dbesjn dbesy0 dbesy1 dbesyn \
	dtime etime fdate fgetc fget flush1 fnum fputc fput fstat gerror \
	getcwd getgid getlog getpid getuid gmtime hostnm idate ierrno irand \
	isatty itime kill link lnblnk lstat ltime mclock perror rand rename \
	secnds second sleep srand stat symlnk time ttynam umask unlink \
	vxtidt vxttim alarm

# These dependencies can be satisfied in parallel.  The [fiu]77
# targets update stamp files which the $(LIBG2C) target checks in the
# sub-make.  (Probably only one stamp file is really needed.)
all: i77 f77 u77 s-libe77
	$(MAKE) $(FLAGS_TO_PASS) $(LIBG2C)

i77 f77 u77: g2c.h

$(LIBG2C): s-libi77 s-libf77 s-libu77 s-libe77
	rm -f $(LIBG2C)
	set -e; \
	for i in $(SUBDIRS); \
	  do (cd $$i && $(MAKE) $(FLAGS_TO_PASS) LIBG2C=../$(LIBG2C) archive); \
	done
	objs=""; for i in $(F2CEXT); do objs="$$objs libE77/L$$i.o"; done; \
	  $(AR) $(AR_FLAGS) $(LIBG2C) $$objs
	$(RANLIB) $(LIBG2C)

i77:
	cd libI77; $(MAKE) $(FLAGS_TO_PASS) all

f77:
	cd libF77; $(MAKE) $(FLAGS_TO_PASS) all

u77:
	cd libU77; $(MAKE) $(FLAGS_TO_PASS) all

s-libe77: f2cext.c
	if [ -d libE77 ]; then rm -f libE77/*.o; else mkdir libE77; fi
	for name in $(F2CEXT); \
	do \
	  echo $${name}; \
	  $(CC) -c -I. -I$(srcdir) -I../../include $(CPPFLAGS) $(CFLAGS) \
	    -DL$${name} $(srcdir)/f2cext.c \
	    -o libE77/L$${name}.o; \
	  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \
	done
	echo timestamp >s-libe77

${srcdir}/configure: configure.in
	rm -f config.cache
	cd $(srcdir) && autoconf

# Dependence on Makefile serializes for parallel make.
g2c.h: g2c.hin config.status Makefile
# Might try to avoid rebuilding everything if Makefile or configure
# changes and g2c.h doesn't; see also the Makefile rule.  Should
# depend on another stamp file rather than using the commented-out
# lines below, since g2c.h isn't necessarily brought up to date.
#	mv g2c.h g2c.x
	$(SHELL) config.status
#	$(srcdir)/../move-if-change g2c.h g2c.x && mv g2c.x g2c.h

Makefile: Makefile.in config.status
# Autoconf doc uses `./config.status'.  Is there a good reason to use 
	  $(SHELL) config.status

config.status: configure $(gcc_version_trigger)
# Make sure we don't pick up a site config file and that configure
# gets run with correct values of variables such as CC.
	CONFIG_SITE=no-such-file $(FLAGS_TO_PASS) \
	  $(SHELL) config.status --recheck

info install-info clean-info dvi TAGS dist installcheck installdirs:

check:
	cd libU77; $(MAKE) G77DIR=../../../gcc/ check

install: all
	$(INSTALL_DATA) $(LIBG2C) $(libsubdir)/$(LIBG2C).n
	( cd $(libsubdir) ; $(RANLIB) $(LIBG2C).n )
	mv -f $(libsubdir)/$(LIBG2C).n $(libsubdir)/$(LIBG2C)
	$(INSTALL_DATA) g2c.h $(libsubdir)/include/g2c.h
	@if [ -f f2c-install-ok -o -f $(srcdir)/f2c-install-ok ]; then \
	  echo ''; \
	  echo 'Warning: g77 no longer installs libf2c.a or f2c.h.'; \
	  echo '         You must do so yourself.  For more information,'; \
	  echo '         read "Distributing Binaries" in the g77 docs.'; \
	  echo '         (To turn off this warning, delete the file'; \
	  echo '         f2c-install-ok in the source or build directory.)'; \
	  echo ''; \
	else true; fi

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' install

uninstall:
	rm -f $(libsubdir)/include/g2c.h $(libsubdir)/$(LIBG2C)

mostlyclean:
	rm -f $(LIBG2C)
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) mostlyclean); done
	rm -fr libE77

clean: mostlyclean
	rm -f config.log
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) clean); done

distclean: clean
	rm -f Makefile config.cache config.status g2c.h s-libe77
	for i in $(SUBDIRS); do (cd $$i && $(MAKE) distclean); done

maintainer-clean:

rebuilt: configure

.PHONY: rebuilt mostlyclean clean distclean maintainer-clean all \
        i77 f77 u77 check uninstall install-strip dist \
        installcheck installdirs
