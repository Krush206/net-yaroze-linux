
                      EGCS Frequently Asked Questions
                                      
   The latest version of this document is always available at
   [1]http://egcs.cygnus.com/faq.html.
   
   This FAQ tries to answer specific questions concerning EGCS. For
   general information regarding C resp. C++, please check the
   [2]comp.lang.c FAQ, [3]comp.lang.c++ FAQ, and the [4]comp.std.c++ FAQ.
     _________________________________________________________________
   
                                   Questions
                                       
    1. [5]General information
         1. [6]How is EGCS different from gcc2?
         2. [7]What is an open development model?
         3. [8]Releases and Forking
         4. [9]How to report bugs
    2. [10]Installation
         1. [11]`_IO_stdfile_0_lock' was not declared in this scope
         2. [12]Problems building the Fortran compiler
         3. [13]How to install both gcc2 and EGCS
         4. [14]Dynamic linker is unable to find GCC libraries
         5. [15]libstdc++/libio tests fail badly with --enable-shared
         6. [16]GCC can not find GNU as/GNU ld
         7. [17]cpp: Usage:... Error
    3. [18]Testsuite problems
         1. [19]Unable to run the testsuite
         2. [20]How do I pass flags like -fnew-abi to the testsuite?
         3. [21]How can I run the test suite with multiple options?
    4. [22]Platform-specific issues
         1. [23]Problems building on MIPS platforms
         2. [24]Problems with exception handling on x86 platforms
         3. [25]Problems with Invalid `asm' statements
         4. [26]Bootstrap comparison failures on HPs
         5. [27]Bootstrap loops rebuilding cc1 over and over
         6. [28]Building Linux kernels
         7. [29]EGCS with Windows
         8. [30]EGCS with OS/2
         9. [31]How do I compile X11 headers with g++
        10. [32]Linker core dumps on SunOS4
        11. [33]Assembler errors on Alpha targets
        12. [34]Signal 11 on GNU/Linux
        13. [35]Link failures using -bbigtoc on AIX 4.1
        14. [36]AIX 4.3 archive libraries ("not a COFF file")
        15. [37]Linker error on AIX 4.3.2
        16. [38]Assembler error on AIX 4.3.0
        17. [39]Does EGCS support the O32 ABI on IRIX 6?
        18. [40]Bugs in N32 and N64 ABI implementation on IRIX 6
        19. [41]Links to other FAQs for GCC on IRIX platforms?
        20. [42]Problems with egcs on NEXTSTEP 3.x systems
        21. [43]How to build a cross compiler
    5. [44]Bugs and Non-Bugs
         1. [45]FD_ZERO macro
         2. [46]Octave 2.0.13 does not compile
    6. [47]Miscellaneous
         1. [48]Virtual memory exhausted
         2. [49]Snapshots, how, when, why
         3. [50]Friend Templates
         4. [51]Where to find libg++
         5. [52]Why do I need autoconf, bison, xgettext, automake, etc 
         6. [53]Problems debugging EGCS code
         7. [54]Conflicts when using cvs update 
         8. [55]Using EGCS with GNAT/Ada
         9. [56]Using EGCS with GNU Pascal
        10. [57]Using CVS to download snapshots 
        11. [58]Why can't I build a shared library?
        12. [59]Dealing with spam on the lists
        13. [60]How to work around too long C++ symbol names?
            (-fsquangle)
        14. [61]When building from CVS sources, I see 'gperf: invalid
            option -- F', even with the most current version of gperf.
     _________________________________________________________________
   
                              General information
                                       
How is EGCS different from gcc2?

   Six years ago, gcc version 1 had reached a point of stability. For the
   targets it could support, it worked well. It had limitations inherent
   in its design that would be difficult to resolve, so a major effort
   was made and gcc version 2 was the result. When we had gcc2 in a
   useful state, development efforts on gcc1 stopped and we all
   concentrated on making gcc2 better than gcc1 could ever be. This is
   the kind of step forward we want to make with EGCS.
   
   In brief, the three biggest differences between EGCS and gcc2 are:
     * More reexamination of basic architectural decisions of gcc and an
       interest in adding new optimizations;
     * working with the groups who have fractured out from gcc2 (like the
       Linux kernel folks, the Intel optimizations folks, Fortran folks)
       including more front-ends; and finally
     * An open development model ([62]see below) for the development
       process.
       
   These three differences will work together to result in a more useful
   compiler, a more stable compiler, a central compiler that works for
   more people, a compiler that generates better code.
   
   There are a lot of exciting compiler optimizations that have come out.
   We want them in gcc. There are a lot of front ends out there for gcc
   for languages like Fortran or Pascal. We want them easily installable
   by users. After six years of working on gcc2, we've come to see
   problems and limitations in the way gcc is architected; it is time to
   address these again.
     _________________________________________________________________
   
What is an open development model?

   With EGCS, we are going to try a bazaar style[63][1] approach to its
   development: We're going to be making snapshots publicly available to
   anyone who wants to try them; we're going to welcome anyone to join
   the development mailing list. All of the discussions on the
   development mailing list are available via the web. We're going to be
   making releases with a much higher frequency than they have been made
   in the past: We're shooting for three by the end of 1997.
   
   In addition to weekly snapshots of the EGCS development sources, we
   are going to look at making the sources readable from a CVS server by
   anyone. We want to make it so external maintainers of parts of EGCS
   are able to commit changes to their part of EGCS directly into the
   sources without going through an intermediary.
   
   There have been many potential gcc developers who were not able to
   participate in gcc development in the past. We want these people to
   help in any way they can; we ultimately want gcc to be the best
   compiler in the world.
   
   A compiler is a complicated piece of software, there will still be
   strong central maintainers who will reject patches, who will demand
   documentation of implementations, and who will keep the level of
   quality as high as it is today. Code that could use wider testing may
   be integrated--code that is simply ill-conceived won't be.
   
   EGCS is not the first piece of software to use this open development
   process; FreeBSD, the Emacs lisp repository, and the Linux kernel are
   a few examples of the bazaar style of development.
   
   With EGCS, we will be adding new features and optimizations at a rate
   that has not been done since the creation of gcc2; these additions
   will inevitably have a temporarily destabilizing effect. With the help
   of developers working together with this bazaar style development, the
   resulting stability and quality levels will be better than we've had
   before.
   
     _[1]_ We've been discussing different development models a lot over
     the past few months. The paper which started all of this introduced
     two terms: A _cathedral_ development model versus a _bazaar_
     development model. The paper is written by Eric S. Raymond, it is
     called ``[64]The Cathedral and the Bazaar''. The paper is a useful
     starting point for discussions.
     _________________________________________________________________
   
Releases and Forking?

   Some folks have questioned whether or not making releases is
   consistent with the goals of the EGCS project and whether or not
   making releases is a fork from gcc2.
The EGCS project has several goals, including:

  * Experimenting with a new development model, release process and
  release packaging,

  * Using the new development model to accelerate development of new
  features, optimizations, etc for future inclusion in gcc,

  * Providing high quality releases to the public.

An EGCS release is a copy of the EGCS sources that the developers have
tested and are believed to be suitable for wider scale use and testing.

Making releases of stable, tested sources is both a goal and a means by
which we hope to achieve other goals of the EGCS project.

The existence of a stable tested release allows EGCS to be more thoroughly
used and tested by a wider audience than is capable of testing snapshots.
The expanded audience provides developers with critical feedback in a
timely manner, which is beneficial to GCC as a whole and is consistent with
the stated goals of EGCS.

The gcc maintainers are encouraged to migrate tested fixes and new features
from EGCS into gcc at their discretion.  EGCS maintainers are willing to
assist the gcc maintainers as time permits.  EGCS periodically merges in
changes from gcc into the EGCS sources.

What will keep EGCS from becoming a fork is cooperation between the
developers of gcc and EGCS.

We don't see this situation as significantly different than other projects
that make releases based on some version of the gcc sources (Cygnus, g77,
etc).  All the code is still available for inclusion in gcc at the discretion
of the gcc maintainers.
     _________________________________________________________________
   
How to report bugs

   There are complete instructions in the egcs info manual, section Bugs.
   The manual can be read using `_M-x info_' in Emacs, or if the GNU info
   program is installed on your system by `info --node "(gcc)Bugs"'. Or
   see the file [65]BUGS included with the egcs source code.
   
   Before you report a bug for the _C++ compiler_, please check the
   [66]list of well-known bugs. If you want to report a bug with _egcs
   1.0.x_, we recommend upgrading to the current release first.
   
   In short, if egcs says Internal compiler error (or any other error
   that you'd like us to be able to reproduce, for that matter), please
   mail a bug report to [67]egcs-bugs@egcs.cygnus.com including:
     * The egcs version
     * The system type
     * All options you passed to egcs
     * Preprocessed output of the source file that caused the compiler
       error
       
   All this can normally be accomplished by mailing the command line, the
   output of the command, and the resulting `_your-file_.i' for C, or
   `_your-file_.ii' for C++, corresponding to:
   
   gcc -v --save-temps _all-your-options_ _your-file_.c
   
   Typically the CPP output will be large, so please compress the
   resulting file with one of the popular compression programs such as
   gzip, bzip2, compress or pkzip, then include the compressed CPP output
   as an attachment to your message.
   
   The egcs lists have message size limits (100 kbytes) and bug reports
   over those limits will currently be bounced. We're trying to find a
   way to allow larger bug reports to be posted, but this is currently
   impossible. So, although we prefer to have complete bug reports
   archived, if you cannot reduce the bug report below the limit, please
   make it available for ftp or http and post the URL.
     _________________________________________________________________
   
                                 Installation
                                       
`_IO_stdfile_0_lock' was not declared in this scope

   If you get this error, it means either EGCS incorrectly guessed what
   version of libc is installed on your GNU/Linux system, or you
   incorrectly specified a version of glibc when configuring EGCS.
   
   If you did not provide a target name when configuring EGCS, then
   you've found a bug which needs to be reported. If you did provide a
   target name at configure time, then you should reconfigure without
   specifying a target name.
     _________________________________________________________________
   
Problems building the Fortran compiler

   The Fortran front end can not be built with most vendor compilers; it
   must be built with gcc. As a result, you may get an error if you do
   not follow the install instructions carefully.
   
   In particular, instead of using "make" to build EGCS, you should use
   "make bootstrap" if you are building a native compiler or "make cross"
   if you are building a cross compiler.
   
   It has also been reported that the Fortran compiler can not be built
   on Red Hat 4.X GNU/Linux for the Alpha. Fixing this may require
   upgrading binutils or to Red Hat 5.0; we'll provide more information
   as it becomes available.
     _________________________________________________________________
   
How to install both EGCS and gcc2

   It may be desirable to install both EGCS and gcc2 on the same system.
   This can be done by using different prefix paths at configure time and
   a few symlinks.
   
   Basically, configure the two compilers with different --prefix
   options, then build and install each compiler. Assume you want "gcc"
   to be the EGCS compiler and available in /usr/local/bin; also assume
   that you want "gcc2" to be the gcc2 compiler and also available in
   /usr/local/bin.
   
   The easiest way to do this is to configure EGCS with
   --prefix=/usr/local/egcs and gcc2 with --prefix=/usr/local/gcc2. Build
   and install both compilers. Then make a symlink from
   /usr/local/bin/gcc to /usr/local/egcs/bin/gcc and from
   /usr/local/bin/gcc2 to /usr/local/gcc2/bin/gcc. Create similar links
   for the "g++", "c++" and "g77" compiler drivers.
   
   An alternative to using symlinks is to configure with a
   --program-transform-name option. This option specifies a sed command
   to process installed program names with. Using it you can, for
   instance, have all the EGCS programs installed as "egcs-gcc" and the
   like. You will still have to specify different --prefix options for
   EGCS and gcc2, because it is only the executable program names that
   are transformed. The difference is that you (as administrator) do not
   have to set up symlinks, but must specify additional directories in
   your (as a user) PATH. A complication with --program-transform-name is
   that the sed command invariably contains characters significant to the
   shell, and these have to be escaped correctly, also it is not possible
   to use "^" or "$" in the command. Here is the option to prefix "egcs-"
   to the egcs installed programs
   "--program-transform-name='s,\\\\(.*\\\\),egcs-\\\\1,'". With the
   above --prefix option, that will install the EGCS programs into
   /usr/local/egcs/bin with names prefixed by "egcs-". You can use
   --program-transform-name if you have multiple versions of EGCS, and
   wish to be sure about which version you are invoking.
   
   If you use --prefix, EGCS may have difficulty locating a GNU assembler
   or linker on your system, [68]GCC can not find GNU as/GNU ld explains
   how to deal with this.
     _________________________________________________________________
   
Dynamic linker is unable to find GCC libraries

   This problem manifests itself by programs not finding shared libraries
   they depend on when the programs are started. Note this problem often
   manifests itself with failures in the libio/libstdc++ tests after
   configuring with --enable-shared and building EGCS.
   
   GCC does not specify a runpath so that the dynamic linker can find
   dynamic libraries at runtime.
   
   The short explanation is that if you always pass a -R option to the
   linker, then your programs become dependent on directories which may
   be NFS mounted, and programs may hang unnecessarily when an NFS server
   goes down.
   
   The problem is not programs that do require the directories; those
   programs are going to hang no matter what you do. The problem is
   programs that do not require the directories.
   
   SunOS effectively always passed a -R option for every -L option; this
   was a bad idea, and so it was removed for Solaris. We should not
   recreate it.
     _________________________________________________________________
   
GCC can not find GNU as/GNU ld

   To ensure that EGCS finds the GNU assembler (the GNU loader), which
   are required by [69]some configurations, you should configure these
   with the same --prefix option as you used for EGCS. Then build &
   install GNU as (GNU ld) and proceed with building EGCS.
   
   Another alternative is to create links to GNU as and ld in any of the
   directories printed by the command `gcc -print-search-dirs | grep
   '^programs:''. The link to `ld' should be named `real-ld' if `ld'
   already exists.
   
   Pre-1.2 snapshots of egcs allow you to specify the full pathname of
   the assembler and the linker to use. The configure flags are
   `--with-as=/path/to/as' and `--with-ld=/path/to/ld'. EGCS will try to
   use these pathnames before looking for `as' or `(real-)ld' in the
   standard search dirs. If, at configure-time, the specified programs
   are found to be GNU utilities, `--with-gnu-as' and `--with-gnu-ld'
   need not be used; these flags will be auto-detected.
     _________________________________________________________________
   
cpp: Usage:... Error

   If you get an error like this when building EGCS (particularly when
   building __mulsi3), then you likely have a problem with your
   environment variables.
cpp: Usage: /usr/lib/gcc-lib/i586-unknown-linux-gnulibc1/2.7.2.3/cpp
[switches] input output

   First look for an explicit '.' in either LIBRARY_PATH or
   GCC_EXEC_PREFIX from your environment. If you do not find an explicit
   '.', look for an empty pathname in those variables. Note that ':' at
   either the start or end of these variables is an implicit '.' and will
   cause problems.
   
   Also note '::' in these paths will also cause similar problems.
     _________________________________________________________________
   
                              Testsuite problems
                                       
Unable to run the testsuite

   If you get a message about unable to find "standard.exp" when trying
   to run the EGCS testsuites, then your dejagnu is too old to run the
   EGCS tests. You will need to get a newer version of dejagnu; we've
   made a [70]dejagnu snapshot available until a new version of dejagnu
   can be released.
     _________________________________________________________________
   
How do I pass flags like -fnew-abi to the testsuite?

   If you invoke runtest directly, you can use the --tool_opts option,
   e.g:
  runtest --tool_opts "-fnew-abi -fno-honor-std" <other options>

   Or, if you use make check you can use the make variable RUNTESTFLAGS,
   e.g:
  make RUNTESTFLAGS='--tool_opts "-fnew-abi -fno-honor-std"' check-g++
     _________________________________________________________________
   
How can I run the test suite with multiple options?

   If you invoke runtest directly, you can use the --target_board option,
   e.g:
  runtest --target_board "unix{-fPIC,-fpic,}" <other options>

   Or, if you use make check you can use the make variable RUNTESTFLAGS,
   e.g:
  make RUNTESTFLAGS='--target_board "unix{-fPIC,-fpic,}"' check-gcc

   Either of these examples will run the tests three times. Once with
   -fPIC, once with -fpic, and once with no additional flags.
   
   This technique is particularly useful on multilibbed targets.
     _________________________________________________________________
   
                           Platform-specific issues
                                       
Problems building on MIPS platforms

   EGCS requires the use of GAS on all versions of IRIX, except IRIX 6,
   due to limitations in older IRIX assemblers.
   
   Either of these messages indicates that you are using the MIPS
   assembler when instead you should be using GAS.
    as0: Error: ./libgcc2.c, line 1:Badly delimited numeric literal
          .4byte $LECIE1-$LSCIE1
    as0: Error: ./libgcc2.c, line 1:malformed statement
     _________________________________________________________________
   
    as0: Error: /home/law/egcs_release/gcc/libgcc2.c, line 1:undefined symbol i
n expression
    .word $LECIE1-$LSCIE1

   For IRIX 6, you should use the native assembler as GAS is not yet
   supported on this platform.
     _________________________________________________________________
   
Problems with exception handling on x86 platforms

   If you are using the GNU assembler (aka gas) on an x86 platform and
   exception handling is not working correctly, then odds are you're
   using a buggy assembler. Releases of binutils prior to 2.9 are known
   to assemble exception handling code incorrectly.
   
   We recommend binutils-2.9.1 or newer. Some post-2.9.1 snapshots of
   binutils fix some subtle bugs, particularly on x86 and alpha. They are
   available at [71]ftp://tsx-11.mit.edu/pub/linux/packages/GCC/. The
   2.9.1.0.15 snapshot is known to work fine on those platforms; other
   than that, be aware that snapshots are in general untested and may not
   work (or even build). Use them at your own risk.
     _________________________________________________________________
   
Problems with invalid `asm' statements

   Previous releases of gcc (for example, gcc-2.7.2._X_) did not detect
   as invalid a clobber specifier that clobbered an operand. Instead, it
   could spuriously and silently generate incorrect code for certain
   non-obvious cases of source code. Even more unfortunately, the manual
   (Using and Porting GCC, section Extended Asm, see the [72]bug report
   entry) did not explicitly say that it was invalid to specify clobber
   registers that were destined to overlap operands; it could arguably be
   interpreted that it was correct to clobber an input operand to mark it
   as not holding a usable value after the asm.
   
   For the general case, there is no way to tell whether a specified
   clobber is _intended_ to overlap with a specific (input) operand or is
   a program error, where the choice of actual register for operands
   failed to _avoid_ the clobbered register. Such unavoidable overlap is
   detected by versions egcs-2.92.18 19981104 and above, and flagged as
   an error rather than accepted. An error message is given, such as:
foo.c: In function `foo':
foo.c:7: Invalid `asm' statement:
foo.c:7: fixed or forbidden register 0 (ax) was spilled for class AREG.

   Unfortunately, a lot of existing software, for example the [73]Linux
   kernel version 2.0.35 for the Intel x86, has constructs where input
   operands are marked as clobbered.
   
   The manual now describes how to write constructs with operands that
   are modified by the construct, but not actually used. To write an asm
   which modifies an input operand but does not output anything usable,
   specify that operand as an _output operand_ outputting to an _unused
   dummy variable_.
   
   In the following example for the x86 architecture (taken from the
   Linux 2.0.35 kernel -- include/asm-i386/delay.h), the register-class
   constraint "a" denotes a register class containing the single register
   "ax" (aka. "eax"). It is therefore invalid to clobber "ax"; this
   operand has to be specified as an output as well as an input. The
   following code is therefore _invalid_:
extern __inline__ void
__delay (int loops)
{
  __asm__ __volatile__
    (".align 2,0x90\n1:\tdecl %0\n\tjns 1b"
     : /* no outputs */
     : "a" (loops)
     : "ax");
}

   It could be argued that since the register class for "a" contains only
   a single register, this could be detected as an "obvious" intended
   clobber of the input operand. While that is feasible, it opens up for
   further "obvious" cases, where the level of obviousness changes from
   person to person. As there is a correct way to write such asm
   constructs, this obviousness-detection is not needed other than for
   reasons of compatibility with an existing code-base, and that code
   base can be corrected.
   
   This corrected and clobber-less version, is _valid_ for egcs of
   current CVS, as well as for previous versions of gcc:
extern __inline__ void
__delay (int loops)
{
  int dummy;

  __asm__ __volatile__
    (".align 2,0x90\n1:\tdecl %0\n\tjns 1b"
     : "=a" (dummy)
     : "0" (loops));
}

   Note that the asm construct now has an output operand, but it is
   unused. Normally asm constructs with only unused output operands may
   be removed by gcc, unless marked volatile as above.
     _________________________________________________________________
   
Bootstrap comparison failures on HPs

   If you bootstrap the compiler on HP-UX 10.x using the HP assembler
   instead of gas, every file will fail the comparison test. Please see
   the section on HP-UX 10.x in the [74]Host/Target specific installation
   notes for more information
     _________________________________________________________________
   
Bootstrap loops rebuilding cc1 over and over

   When building EGCS, the build process loops rebuilding cc1 over and
   over again. This happens on mips-sgi-irix5.2, and possibly other
   platforms.
   
   It has been reported that this is a known bug in the make shipped with
   IRIX 5.2. We recommend you use GNU make instead of the vendor supplied
   make program; however, you may have success with "smake" on IRIX 5.2
   if you do not have GNU make available.
     _________________________________________________________________
   
Building Linux kernels

   Linux 2.2.x kernels work with any version of egcs.
   
   If you try to build a 2.0.x kernel for Intel machines with egcs, then
   you are on your own. The 2.0.x kernels are to be built only with gcc
   2.7.2. They use certain asm constructs which are incorrect, but (by
   accident) happen to work with gcc 2.7.2. If you insist on building
   2.0.x kernels with egcs, you may be interested in this [75]patch which
   fixes some of the asm problems. You will also want to change asm
   constructs to [76]avoid clobbering their input operands.
   
   If you installed a recent binutils/gas snapshot on your GNU/Linux
   system, you may not be able to build the kernel because objdump does
   not understand the "-k" switch. The solution for this problem is to
   remove /usr/bin/encaps. (This is an obsolete program that was part of
   older binutils distributions; the Linux kernel's Makefile looks for
   this program to decide if you have an old or a new binutils. Problems
   occur if you installed a new binutils but haven't removed encaps,
   because the Makefile thinks you have the old one.)
   
   Finally, you may get errors with the X driver of the form
_X11TransSocketUNIXConnect: Can't connect: errno = 111

   This is a kernel bug. The function sys_iopl in
   arch/i386/kernel/ioport.c does an illegal hack which used to work but
   is now broken since GCC optimizes more aggressively . The newer 2.1.x
   kernels already have a fix which should also work in 2.0.32.
     _________________________________________________________________
   
EGCS with Windows

   EGCS does not currently support windows, either natively or with the
   cygwin32 dll. However Mumit Khan has been working on supporting
   Windows with EGCS. You should check out his site if you're interested
   in Windows support. [77]GNU Win32 related projects
     _________________________________________________________________
   
EGCS with OS/2

   EGCS does not currently support OS/2. However, Andrew Zabolotny has
   been working on a generic os/2 port with pgcc. The current code code
   can be found at [78]http://www.goof.com/pcg/os2/.
     _________________________________________________________________
   
How do I compile X11 headers with g++

   When compiling X11 headers with a egcs 2.92.33 or newer, g++ will
   complain that types are missing. These headers assume that omitting
   the type means 'int'; this assumption is wrong for C++.
   
   g++ accepts such (illegal) constructs with the option -fpermissive; it
   will assume that missing type is 'int' (as defined by the C89
   standard).
   
   Since the upcoming C99 standard also obsoletes the implicit type
   assumptions, the X11 headers have to get fixed eventually.
     _________________________________________________________________
   
SunOS4 Linker core dumps

   A bug in the SunOS4 linker will cause it to crash when linking -fPIC
   compiled objects.
   
   To fix this problem you can either use the most recent version of
   binutils or get the latest SunOS4 linker patch (patch ID 100170-10)
   from Sun's patch site.
     _________________________________________________________________
   
Assembler errors on Alpha targets

   Error: Unknown pseudo-op: `.arch'
   GNU/Linux Alpha EV56 or PCA56 hosts running Red Hat 4.2 or 5.0 may see
   errors of this sort. This is a signal that a new assembler is needed
   if you want to generate BWX insns for your machine.
   
   The version shipped with Red Hat 4.2 (2.7.0.2) has a fault wherein it
   will silently generate incorrect code. The version shipped with Red
   Hat 5.0 (2.8.0.1) is not broken, but required an extra -m21164a
   argument on the command-line. In order to visibly trap 2.7.0.2, I now
   issue DEC's .arch pseudo into the assembly. Relieving the problem of
   mucking with command-line arguments for 2.8.0.1 is a pleasant side
   effect.
   
   If you've got Red Hat 5.0 installed, you may grab binutils 2.9.1 and
   be happy. If you've got Red Hat 4.2, bugs make it much harder to
   upgrade pieces on your own, and you are better off upgrading the
   entire system.
   
   In either case, your problem may be bypassed by not emitting BWX code
   by default. Do this by using
        configure alphaev5-unknown-linux-gnulibc1

   if you have RH 4.2, or
        configure alphaev5-unknown-linux-gnu

   if you have RH 5.0.
   
   Error: macro requires $at register while noat in effect
   This error also indicates that you should upgrade to a newer version
   of the assembler, 2.9 or later. If you can not upgrade the assembler,
   the compiler option "-Wa,-m21164a" may work around this problem.
     _________________________________________________________________
   
Signal 11 on GNU/Linux

   If you receive Signal 11 errors when building on GNU/Linux, then it is
   possible you have a hardware problem. Further information on this can
   be found on [79]www.bitwizard.nl.
     _________________________________________________________________
   
Link failures using -bbigtoc on AIX 4.1

   Some versions of the AIX binder (linker) can fail with a relocation
   overflow severe error when the -bbigtoc option is used to link
   GCC-produced object files into an executable that overflows the TOC. A
   fix for APAR IX75823 (OVERFLOW DURING LINK WHEN USING GCC AND
   -BBIGTOC) is available from IBM Customer Support and from its
   [80]service.boulder.ibm.com website as PTF U455193.
     _________________________________________________________________
   
AIX 4.3 archive libraries ("not a COFF file")

   AIX 4.3 utilizes a new "large format" archive to support both 32-bit
   and 64-bit object modules. The routines provided in AIX 4.3.0 and AIX
   4.3.1 to parse archive libraries did not handle the new format
   correctly. These routines are used by GCC and result in error messages
   during linking such as "not a COFF file". The version of the routines
   shipped with AIX 4.3.1 should work for a 32-bit environment. The -g
   option of the archive command may be used to create archives of 32-bit
   objects using the original "small format". A correct version of the
   routines is shipped with AIX 4.3.2.
     _________________________________________________________________
   
Linker error on AIX 4.3.2

   The AIX 4.3.2.1 linker (bos.rte.bind_cmds Level 4.3.2.1) will dump
   core with a segmentation fault when invoked by any version of GCC. A
   fix for APAR IX87327 will be available from IBM Customer Support.
     _________________________________________________________________
   
Assembler error on AIX 4.3.0

   The initial assembler shipped with AIX 4.3.0 generates incorrect
   object files. A fix for APAR IX74254 (64BIT DISASSEMBLED OUPUT FROM
   COMPILER FAILS TO ASSEMBLE/BIND) is available from IBM Customer
   Support and from its [81]service.boulder.ibm.com website as PTF
   U453956. This fix is incorporated in AIX 4.3.1 and above.
     _________________________________________________________________
   
Does EGCS support the O32 ABI on IRIX 6

   Gcc does not currently support generating O32 ABI binaries in the
   mips-sgi-irix6 configurations.
   
   It used to be possible to create a gcc with O32 ABI only support by
   configuring it for the mips-sgi-irix5 target. See [82]Links to other
   FAQs for GCC on IRIX platforms for details.
     _________________________________________________________________
   
Bugs in N32 and N64 ABI implementation on IRIX 6

   Gcc does not correctly pass/return structures which are smaller than
   16 bytes and which are not 8 bytes. The problem is very involved and
   difficult to fix. It affects a number of other targets also, but IRIX
   6 is affected the most, because it is a 64 bit target, and 4 byte
   structures are common. The exact problem is that structures are being
   padded at the wrong end, e.g. a 4 byte structure is loaded into the
   lower 4 bytes of the register when it should be loaded into the upper
   4 bytes of the register.
   
   Gcc is consistent with itself, but not consistent with the SGI C
   compiler [and the SGI supplied runtime libraries], so the only
   failures that can happen are when there are library functions that
   take/return such structures. There are very few such library
   functions. I can only recall seeing two of them: inet_ntoa, and
   semctl.
     _________________________________________________________________
   
Links to other FAQs for GCC on IRIX platforms

   [83]http://reality.sgi.com/ariel/freeware
     _________________________________________________________________
   
Problems with EGCS on NEXTSTEP 3.x systems

   On some versions of NEXTSTEP 3.x, compilation of EGCS will fail during
   stage1. More information can be found in the section on NEXTSTEP 3.x
   in the [84]Host/Target specific installation notes.
     _________________________________________________________________
   
How to build a cross compiler

   Building cross compilers is a rather complex undertaking because they
   usually need additional software (cross assembler, cross linker,
   target libraries, target include files, etc).
   
   We recommend reading the [85]crossgcc FAQ for information about
   building cross compilers.
   
   If you have all the pieces available, then `make cross' should build a
   cross compiler. `make LANGUAGES="c c++" install' will install the
   cross compiler.
   
   Note that if you're trying to build a cross compiler in a tree which
   includes binutils-2.8 in addition to EGCS, then you're going to need
   to make a couple minor tweaks so that the cross assembler, linker and
   nm utilities will be found.
   
   binutils-2.8 builds those files as gas.new, ld.new and nm.new; EGCS
   gcc looks for them using gas-new, ld-new and nm-new, so you may have
   to arrange for any symlinks which point to <file>.new to be changed to
   <file>-new.
     _________________________________________________________________
   
                               Bugs and Non-Bugs
                                       
   Unfortunately, improvements in tools that are widely used are sooner
   or later bound to break _something_. Sometimes, the code that breaks
   was wrong, and then that code should be fixed, even if it works for
   earlier versions of gcc or other compilers. The following problems
   with some releases of widely used packages have been identified:
   
   There is a separate [86]list of well-known bugs describing known
   deficiencies. Naturally we'd like that list to be of zero length.
   
   To report a bug, see [87]How to report bugs.
     _________________________________________________________________
   
FD_ZERO macro

   The FD_ZERO macro in (e.g.) libc-5.4.46 is incorrect. It uses
   [88]invalid asm clobbers. The following rewrite by Ulrich Drepper
   <drepper@cygnus.com> should fix this for glibc 2.0:
  # define __FD_ZERO(fdsetp) \
    do { \
      int __d0, __d1; \
    __asm__ __volatile__ ("cld; rep; stosl" \
                          : "=m" (((__fd_mask *) \
                                   (fdsetp))[__FDELT (__FD_SETSIZE)]), \
                            "=&c" (__d0), "=&D" (__d1) \
                          : "a" (0), "1" (sizeof (__fd_set) \
                                          / sizeof (__fd_mask)), \
                            "2" ((__fd_mask *) (fdsetp)) \
                          : "memory"); \
    } while (0)
     _________________________________________________________________
   
Octave 2.0.13 does not compile

   Apparently Octave 2.0.13 uses some C++ features which have been
   obsoleted and thus fails to build with egcs-1.1 and later. This
   [89]patch to Octave should fix this.
     _________________________________________________________________
   
                                 Miscellaneous
                                       
Virtual memory exhausted error

   This error means your system ran out of memory; this can happen for
   large files, particularly when optimizing. If you're getting this
   error you should consider trying to simplify your files or reducing
   the optimization level.
   
   Note that using -pedantic or -Wreturn-type can cause an explosion in
   the amount of memory needed for template-heavy C++ code, such as code
   that uses STL. Also note that -Wall includes -Wreturn-type, so if you
   use -Wall you will need to specify -Wno-return-type to turn it off.
     _________________________________________________________________
   
Snapshots, how, when, why

   We make snapshots of the EGCS sources about once a week; there is no
   predetermined schedule. These snapshots are intended to give everyone
   access to work in progress. Any given snapshot may generate incorrect
   code or even fail to build.
   
   If you plan on downloading and using snapshots, we highly recommend
   you subscribe to the EGCS mailing lists. See [90]mailing lists on the
   main EGCS page for instructions on how to subscribe.
   
   When using the diff files to update from older snapshots to newer
   snapshots, make sure to use "-E" and "-p" arguments to patch so that
   empty files are deleted and full pathnames are provided to patch. If
   your version of patch does not support "-E", you'll need to get a
   newer version. Also note that you may need autoconf, autoheader and
   various other programs if you use diff files to update from one
   snapshot to the next.
     _________________________________________________________________
   
Friend Templates

   In order to make a specialization of a template function a friend of a
   (possibly template) class, you must explicitly state that the friend
   function is a template, by appending angle brackets to its name, and
   this template function must have been declared already. Here's an
   example:
   
template <typename T> class foo {
  friend void bar(foo<T>);
}

   The above declaration declares a non-template function named bar, so
   it must be explicitly defined for _each_ specialization of foo. A
   template definition of bar won't do, because it is unrelated with the
   non-template declaration above. So you'd have to end up writing:
   
void bar(foo<int>) { /* ... */ }
void bar(foo<void>) { /* ... */ }

   If you meant bar to be a template function, you should have
   forward-declared it as follows. Note that, since the template function
   declaration refers to the template class, the template class must be
   forward-declared too:
   
template <typename T>
class foo;

template <typename T>
void bar(foo<T>);

template <typename T>
class foo {
  friend void bar<>(foo<T>);
};

template <typename T>
void bar(foo<T>) { /* ... */ }

   In this case, the template argument list could be left empty, because
   it can be implicitly deduced from the function arguments, but the
   angle brackets must be present, otherwise the declaration will be
   taken as a non-template function. Furthermore, in some cases, you may
   have to explicitly specify the template arguments, to remove
   ambiguity.
   
   An error in the last public comment draft of the ANSI/ISO C++ Standard
   and the fact that previous releases of gcc would accept such friend
   declarations as template declarations has led people to believe that
   the forward declaration was not necessary, but, according to the final
   version of the Standard, it is.
     _________________________________________________________________
   
Where to find libg++

   Many folks have been asking where to find libg++ for EGCS. First we
   should point out that few programs actually need libg++; most only
   need libstdc++/libio which are included in the EGCS distribution.
   
   If you do need libg++ you can get a libg++ release that works with
   EGCS from [91]ftp://egcs.cygnus.com/pub/egcs/infrastructure/. Note
   that the 2.8.2 snapshot pre-dates the 2.8.1.2 release.
     _________________________________________________________________
   
autoconf, bison, xgettext, automake, etc

   If you're using diffs up dated from one snapshot to the next, or if
   you're using the CVS repository, you may need several additional
   programs to build EGCS.
   
   These include, but are not necessarily limited to autoconf, automake,
   bison, and xgettext.
   
   This is necessary because neither diff nor cvs keep timestamps
   correct. This causes problems for generated files as "make" may think
   those generated files are out of date and try to regenerate them.
   
   An easy way to work around this problem is to use the egcs_update
   script in the contrib subdirectory of egcs, which handles this
   transparently without requiring installation of any additional tools.
   
   When building from diffs or CVS or if you modified some sources, you
   may also need to obtain development versions of some GNU tools, as the
   production versions do not necessarily handle all features needed to
   rebuild egcs.
   
   Autoconf is available from [92]http://sourceware.cygnus.com/autoconf/;
   have a look at [93]ftp://egcs.cygnus.com/pub/egcs/infrastructure/ for
   the other packages.
     _________________________________________________________________
   
Conflicts when using cvs update

   It is not uncommon to get CVS conflict messages for some generated
   files when updating your local sources from the CVS repository.
   Typically such conflicts occur with bison or autoconf generated files.
   
   As long as you haven't been making modifications to the generated
   files or the generator files, it is safe to delete the offending file,
   then run cvs update again to get a new copy.
     _________________________________________________________________
   
Problems debugging EGCS code

   On some systems EGCS will produce dwarf debug records by default;
   however the gdb-4.16 release may not be able to read such debug
   records.
   
   You can either use the argument "-gstabs" instead of "-g" or pick up a
   copy of gdb-4.17 to work around the problem.
     _________________________________________________________________
   
Using EGCS with GNAT/Ada

   The GNU Ada front-end is not currently supported by EGCS; however, it
   is possible to build the GNAT compiler with a little work.
   
   First, retrieve the gnat-3.10p sources. The sources for the Ada front
   end and runtime all live in the "ada" subdirectory. Move that
   subdirectory to egcs/gcc/ada.
   
   Second, apply the patch found in egcs/gcc/README.gnat.
   
   Finally, rebuild per the GNAT build instructions.
     _________________________________________________________________
   
Using EGCS with GNU Pascal

   The [94]GNU Pascal front-end does work with egcs-1.1 It does not work
   with egcs-1.0.x and the main branch as of egcs-2.92.18. A tarball can
   be found at [95]ftp://agnes.dida.physik.uni-essen.de/gnu-pascal/beta/.
     _________________________________________________________________
   
Using CVS to download snapshots

   It is possible to checkout specific snapshots with CVS or to check out
   the latest snapshot.
   
   We use CVS tags to identify each snapshot we make. Snapshot tags have
   the form "egcs_ss_YYYYMMDD". In addition, the latest official snapshot
   always has the tag "egcs_latest_snapshot".
     _________________________________________________________________
   
Why can't I build a shared library?

   When building a shared library you may get an error message from the
   linker like `assert pure-text failed:' or `DP relative code in file'.
   
   This kind of error occurs when you've failed to provide proper flags
   to gcc when linking the shared library.
   
   You can get this error even if all the .o files for the shared library
   were compiled with the proper PIC option. When building a shared
   library, gcc will compile additional code to be included in the
   library. That additional code must also be compiled with the proper
   PIC option.
   
   Adding the proper PIC option (-fpic or -fPIC) to the link line which
   creates the shared library will fix this problem on targets that
   support PIC in this manner. For example:
        gcc -c -fPIC myfile.c
        gcc -shared -o libmyfile.so -fPIC myfile.o
     _________________________________________________________________
   
How to work around too long C++ symbol names? (-fsquangle)

   If the standard assembler of your platform can't cope with the large
   symbol names that the default g++ name mangling mechanism produces,
   your best bet is to use GNU as, from the GNU binutils package.
   
   Unfortunately, GNU as does not support all platforms supported by
   egcs, so you may have to use an experimental work-around: the
   -fsquangle option, that enables compression of symbol names.
   
   Note that this option is still under development, and subject to
   change. Since it modifies the name mangling mechanism, you'll need to
   build libstdc++ and any other C++ libraries with this option enabled.
   Furthermore, if this option changes its behavior in the future, you'll
   have to rebuild them all again. :-(
   
   This option can be enabled by default by initializing
   `flag_do_squangling' with `1' in `gcc/cp/decl2.c' (it is not
   initialized by default), then rebuilding egcs and any C++ libraries.
     _________________________________________________________________
   
When building from CVS sources, I see 'gperf: invalid option -- F', even with
the most current version of gperf.

   The current version of gperf (v2.7) does not support the -F flag which
   is used when building egcs from CVS sources. You will need to obtain a
   patch for gperf and rebuild the program; this patch is available at
   [96]ftp://egcs.cygnus.com/pub/egcs/infrastructure/
   
   Patches for other tools, particularly autoconf, may also be necessary
   if you're building from CVS sources. Please see the [97]FAQ entry
   regarding these tools to determine if anything else is needed.
   
   These patched utilities should _only_ be required if you are building
   from CVS sources. For example, gperf is used to generate C code for a
   perfect hash function given an input file. Distributions of egcs
   already contain the generated C code, while the CVS sources will
   provide only the gperf input file. So gperf should only be necessary
   if you are building anything obtained from CVS.
     _________________________________________________________________
   
   [98]Return to the EGCS home page
   
   _Last modified: March 10, 1999_

References

   1. http://egcs.cygnus.com/faq.html
   2. http://www.eskimo.com/~scs/C-faq/top.html
   3. http://www.cerfnet.com/~mpcline/On-Line-C++-FAQs/
   4. http://reality.sgi.com/austern_mti/std-c++/faq.html
   5. http://egcs.cygnus.com/faq.html#general
   6. http://egcs.cygnus.com/faq.html#gcc-2-diff
   7. http://egcs.cygnus.com/faq.html#open-development
   8. http://egcs.cygnus.com/faq.html#release-fork
   9. http://egcs.cygnus.com/faq.html#bugreport
  10. http://egcs.cygnus.com/faq.html#installation
  11. http://egcs.cygnus.com/faq.html#morelibc
  12. http://egcs.cygnus.com/faq.html#fortran
  13. http://egcs.cygnus.com/faq.html#multiple
  14. http://egcs.cygnus.com/faq.html#rpath
  15. http://egcs.cygnus.com/faq.html#rpath
  16. http://egcs.cygnus.com/faq.html#gas
  17. http://egcs.cygnus.com/faq.html#environ
  18. http://egcs.cygnus.com/faq.html#testsuite
  19. http://egcs.cygnus.com/faq.html#dejagnu
  20. http://egcs.cygnus.com/faq.html#testoptions
  21. http://egcs.cygnus.com/faq.html#multipletests
  22. http://egcs.cygnus.com/faq.html#platform
  23. http://egcs.cygnus.com/faq.html#mips
  24. http://egcs.cygnus.com/faq.html#x86eh
  25. http://egcs.cygnus.com/faq.html#asmclobber
  26. http://egcs.cygnus.com/faq.html#hpcompare
  27. http://egcs.cygnus.com/faq.html#makebugs
  28. http://egcs.cygnus.com/faq.html#linuxkernel
  29. http://egcs.cygnus.com/faq.html#windows
  30. http://egcs.cygnus.com/faq.html#os2
  31. http://egcs.cygnus.com/faq.html#X11R6
  32. http://egcs.cygnus.com/faq.html#sunos4ld
  33. http://egcs.cygnus.com/faq.html#axparch
  34. http://egcs.cygnus.com/faq.html#sig11
  35. http://egcs.cygnus.com/faq.html#bigtoc
  36. http://egcs.cygnus.com/faq.html#aixcoff
  37. http://egcs.cygnus.com/faq.html#aixld
  38. http://egcs.cygnus.com/faq.html#aixas
  39. http://egcs.cygnus.com/faq.html#o32abi
  40. http://egcs.cygnus.com/faq.html#irix6n32bugs
  41. http://egcs.cygnus.com/faq.html#irixlinks
  42. http://egcs.cygnus.com/faq.html#next
  43. http://egcs.cygnus.com/faq.html#cross
  44. http://egcs.cygnus.com/faq.html#bugs
  45. http://egcs.cygnus.com/faq.html#fdzero
  46. http://egcs.cygnus.com/faq.html#octave
  47. http://egcs.cygnus.com/faq.html#misc
  48. http://egcs.cygnus.com/faq.html#memexhausted
  49. http://egcs.cygnus.com/faq.html#snapshot
  50. http://egcs.cygnus.com/faq.html#friend
  51. http://egcs.cygnus.com/faq.html#libg++
  52. http://egcs.cygnus.com/faq.html#generated_files
  53. http://egcs.cygnus.com/faq.html#gdb
  54. http://egcs.cygnus.com/faq.html#conflicts
  55. http://egcs.cygnus.com/faq.html#gnat
  56. http://egcs.cygnus.com/faq.html#gpc
  57. http://egcs.cygnus.com/faq.html#cvssnapshots
  58. http://egcs.cygnus.com/faq.html#picflag-needed
  59. http://egcs.cygnus.com/spam.html
  60. http://egcs.cygnus.com/faq.html#squangle
  61. http://egcs.cygnus.com/faq.html#gperf
  62. http://egcs.cygnus.com/faq.html#open-development
  63. http://egcs.cygnus.com/faq.html#cathedral-vs-bazaar
  64. http://locke.ccil.org/~esr/writings/cathedral.html
  65. file://localhost/cgi-bin/cvsweb/gcc/BUGS?rev=1.1
  66. http://egcs.cygnus.com/bugs.html
  67. mailto:egcs-bugs@egcs.cygnus.com
  68. http://egcs.cygnus.com/faq.html#gas
  69. http://egcs.cygnus.com/install/specific.html
  70. ftp://egcs.cygnus.com/pub/egcs/infrastructure/dejagnu-980528.tar.gz
  71. ftp://tsx-11.mit.edu/pub/linux/packages/GCC/
  72. http://egcs.cygnus.com/faq.html#bugreport
  73. http://egcs.cygnus.com/faq.html#linuxkernel
  74. http://egcs.cygnus.com/install/specific.html
  75. http://www.suse.de/~florian/kernel+egcs.html
  76. http://egcs.cygnus.com/faq.html#asmclobber
  77. http://www.xraylith.wisc.edu/~khan/software/gnu-win32/
  78. http://www.goof.com/pcg/os2/
  79. http://www.bitwizard.nl/sig11/
  80. http://service.boulder.ibm.com/
  81. http://service.boulder.ibm.com/
  82. http://egcs.cygnus.com/faq.html#irixlinks
  83. http://reality.sgi.com/ariel/freeware/
  84. http://egcs.cygnus.com/install/specific.html
  85. ftp://ftp.cygnus.com/pub/embedded/crossgcc/FAQ
  86. http://egcs.cygnus.com/bugs.html
  87. http://egcs.cygnus.com/faq.html#bugreport
  88. http://egcs.cygnus.com/faq.html#asmclobber
  89. http://www.che.wisc.edu/octave/mailing-lists/bug-octave/1998/270
  90. http://egcs.cygnus.com/index.html#mailinglists
  91. ftp://egcs.cygnus.com/pub/egcs/infrastructure/
  92. http://sourceware.cygnus.com/autoconf/
  93. ftp://egcs.cygnus.com/pub/egcs/infrastructure/
  94. http://home.pages.de/~GNU-Pascal/
  95. ftp://agnes.dida.physik.uni-essen.de/gnu-pascal/beta/
  96. ftp://egcs.cygnus.com/pub/egcs/infrastructure
  97. http://egcs.cygnus.com/faq.html#generated_files
  98. http://egcs.cygnus.com/index.html
